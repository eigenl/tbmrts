/*
	The MIT License (MIT)

	Copyright (c) 2013 Eigen Lenk

	Permission is hereby granted, free of charge, to any person obtaining a copy of
	this software and associated documentation files (the "Software"), to deal in
	the Software without restriction, including without limitation the rights to
	use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
	the Software, and to permit persons to whom the Software is furnished to do so,
	subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
	FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
	IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

var Utils = require('utils');
var Map = require('map');
var Pathfind = require('AStarFinder');
var $ = require('jquery');
var ServerState = require('serverState');

// Memeber variables
GameSession.prototype.id = '';
GameSession.prototype.players = null;
GameSession.prototype.name = '';
GameSession.prototype.maxPlayers = 0;
GameSession.prototype.map = null;
GameSession.prototype.password = null;
GameSession.prototype.active = false;
GameSession.prototype.idleCounter = 0;
GameSession.prototype.spawnpoints = [];

var PowerPlantProduction = 2200;

// Export for NodeJS
module.exports = GameSession;

function shuffle(array)
{
  var currentIndex = array.length, temporaryValue, randomIndex;

  // While there remain elements to shuffle...
  while (0 !== currentIndex)
  {
    // Pick a remaining element...
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}



// Constructor
function GameSession(params)
{
	this.id = Utils.generateID(16);
    this.name = params.name;
    this.maxPlayers = params.players;
    this.players = [];
    this.password = params.password;
	this.active = false;
	// this.active = true; // FOR TESTING
	this.idleCounter = 0;

    this.map = new Map();
    this.map.init();
    
    for (var i = 0; i < this.maxPlayers; ++i) {
    	this.players.push(null);
    }

	this.spawnpoints = shuffle([[3,3], [20, 29], [21,11], [6,23], [15,3], [1,33], [12,32], [11,13]]);
	
	// TESTING
	// this.spawnpoints = [[3,3], [9, 2], [21,11], [6,23], [15,3], [1,33], [12,32], [11,13]];
}

GameSession.prototype.getBuildingLists = function()
{
	var out = [];

	$.each(this.players, function(i, p) {
		if (p == null) 	{
			out.push(null);
		} else {
			var _bldgs = p.buildings
			$.each(p.queue.construction, function(j, b) {
				_bldgs.push(b);
			});
			out.push(_bldgs);
		}
	});
	
	return out;	
}

GameSession.prototype.getUnitLists = function()
{
	var out = [];

	$.each(this.players, function(i, p) {
		if (p == null) 	{
			out.push(null);
		} else {
			out.push(p.units);
		}
	});
	
	return out;	
}
GameSession.prototype.countActivePlayers = function()
{
	var result = 0;
	
	$.each(this.players, function(i, p) {
		if (p != null && p.client != null) {
			result ++;
		}
	});
	
	return result;
}

GameSession.prototype.checkActive = function()
{
	if (this.active == false) {
		this.active = (this.countActivePlayers() > 1);
	} else if (this.active == true) {
		this.active = (this.countActivePlayers() > 0);
	}
}	

GameSession.prototype.getClientsInfos = function()
{
	var connectedClientsInfo = [];

	$.each(this.players, function(i, p) {
		if (p == null || (p != null && p.left == true)) {
			connectedClientsInfo.push(null);
		} else {
			connectedClientsInfo.push({'name': p.client.name, 'id': p.client.id, 'defeated': p.defeated});
		}
	});
	
	return connectedClientsInfo;
}


GameSession.prototype.joinClient = function(client)
{
	var slotIndexes = [];

	for (var i = 0; i < this.maxPlayers; i++)
		slotIndexes.push(i);
		
	slotIndexes = shuffle(slotIndexes);

    for (var j = 0; j < this.maxPlayers; j++)
	{
        var i = slotIndexes[j];
        
        if (this.players[i] == null)
		{
            this.players[i] = {
            	'client': client,
            	'resources': 2500,
            	'resourceDropCounter': 0,
				'index': i,
				'left': false,
				'defeated': false,
            	'buildings': [],
            	'units': [],
            	'upgrade': {
            		'building': [false, false, false, false, false, false, false, false, false],
           			'unit': [false, false, false, false, false, false, false, false, false]
            	},
            	'queue': {
            		'barracks': [],
            		'factory': [],
            		'construction': [],
            		'upgrade': []	
            	},
            	'power': {
            		'max': 0,
            		'level': 0,
            		'required': 0	
            	},
				'indexes': {
					'building': 0,
					'unit': 0
				}
            };
			
			var spawn = this.spawnpoints[i];
            var x = spawn[0], y = spawn[1];

			// Command center
	        this.players[i].buildings.push({
	            "type": 0,
				"condition": GameSession.baseBuildings[0].health,
				"time": 0,
	            "x": x,
	            "y": y,
				"refId": this.players[i].indexes.building++
	        });
	        
	        this.map.setTile(x, y, 3);
	        this.players[i].power.required = GameSession.baseBuildings[0].power;
	        

			
			// FOR TESTING
			
			/*

			this.map.setTile(x, y-1, 3);
        	this.players[i].buildings.push({
	            "type": 1,
				"condition": GameSession.baseBuildings[1].health,
				"time": 0,
	            "x": x,
	            "y": y-1,
				"refId": this.players[i].indexes.building++
	        });
			
			this.map.setTile(x-1, y-1, 3);
			this.players[i].buildings.push({
	            "type": 7,
				"condition": GameSession.baseBuildings[7].health,
				"time": 0,
	            "x": x-1,
	            "y": y-1,
				"refId": this.players[i].indexes.building++
	        });
			
        	this.map.setTile(x-2, y-1, 3);
			this.players[i].buildings.push({
	            "type": 8,
				"condition": GameSession.baseBuildings[8].health,
				"time": 0,
	            "x": x-2,
	            "y": y-1,
				"refId": this.players[i].indexes.building++
	        });
			
			this.map.setTile(x-1, y, 3);
        	this.players[i].buildings.push({
	            "type": 2,
				"condition": GameSession.baseBuildings[2].health,
				"time": 0,
	            "x": x-1,
	            "y": y,
				"refId": this.players[i].indexes.building++
	        });
			
	        this.map.setTile(x-2, y, 3);
        	this.players[i].buildings.push({
	            "type": 3,
				"condition": GameSession.baseBuildings[3].health,
				"time": 0,
	            "x": x-2,
	            "y": y,
				"refId": this.players[i].indexes.building++
	        });
	        
			this.map.setTile(x-3, y, 3);
	        this.players[i].buildings.push({
	            "type": 4,
				"condition": GameSession.baseBuildings[4].health,
				"time": 0,
	            "x": x-3,
	            "y": y,
				"refId": this.players[i].indexes.building++
	        });

			*/
			
			
        	
			// This client is the n-th player in the session
            client.index = i;
            client.gameSession = this;

			this.idleCounter = 0;
			
            return true;
        }
		else if (this.players[i] != null && this.players[i].left == true && this.players[i].defeated == false)
		{
			this.players[i].client = client;
			this.players[i].left = false;
			this.idleCounter = 0;
			
			client.gameSession = this;
			client.index = i;
			
			return true;
		}
    }
    
   	client.gameSession = null;

	return false;
}

GameSession.prototype.removeClient = function(client)
{
	if (!client || client == undefined || client.index == undefined || client.index < 0)
	{
		console.log("Weirdass client tries to leave ...");
		// console.log(client.name);

		
		// TODO
		// compare all player ids with online clients and remove those that have gone missing
		
		return;
	}
	
	// console.log('Client #'+client.index+' leaves the game.');
	
	$.each(this.players[client.index].units, function(ui, u) {
		u.selected = false;
	});
	
	this.players[client.index].left = true;
	this.players[client.index].client = null;
	
	return;
}

GameSession.prototype.destroyEnemyUnitsOnTile = function(client, x, y)
{
	var destroyedUnits = [];
	var anyUnitDestroyed = false;
	
	for (var i = 0; i < this.maxPlayers; ++i) {
		destroyedUnits[i] = [];
	}
	
	$.each(this.players, function(pi, p)
	{
		// Skip self (continue the loop)
		if (pi == client.index) { return true; }
		
		// Skip null client
		if (!p) { return true; }
		
		$.each(p.units, function(ui, u) {
			if (u.x == x && u.y == y) {
				destroyedUnits[pi].push(ui);
				anyUnitDestroyed = true;
			}
		});
	});
	
	if (anyUnitDestroyed)
	{
		this.sendMessageToAllClients(this.players, {
			"method": "unitsDestroyed",
			"result": {
				"units": destroyedUnits
			}
		});
		
		for (var i = 0; i < this.maxPlayers; ++i) {
			for (var ui = destroyedUnits[i].length - 1; ui >= 0; --ui) {
				this.players[i].units.splice(destroyedUnits[i][ui], 1);
			}
		}
	}
	
	return;
}

GameSession.prototype.createBuilding = function(client, params)
{
    if (this.active == false) { return; }
	
	var p = this.players[client.index];
    
	// Enough resources?
    if (p.resources >= GameSession.baseBuildings[params.type].cost)
    {
		// Is tile empty?
		if (this.map.getTile(params.x, params.y) == 0)
		{
			// Nearest base building (excluding turrets) must not be further than 3 tiles
			if (Math.round(distanceToNearestObject(params.x, params.y, p.buildings)) <= 3)
			{
				p.resources -= GameSession.baseBuildings[params.type].cost;
				
				var building = {
				    "type": params.type,
				    "x": params.x,
				    "y": params.y,
				    "condition": GameSession.baseBuildings[params.type].health,
				    "time": GameSession.baseBuildings[params.type].baseTime,
					"refId": p.indexes.building++
				};
				
				// Block the map tile beneath the building
				this.map.setTile(params.x, params.y, 3);
				
				// Add building to construction queue (which is stepped in slowTick)
				p.queue.construction.unshift(building);
				
				// Placing a building destroys all enemy units on that tile. Boohoo.
				this.destroyEnemyUnitsOnTile(client, params.x, params.y);
				
				// Send response to all clients except building owner
				this.sendMessageToAllClientsExcept(this.players, {
				    "method": "constructionStarted",
				    "result": {
				    	"building": building,
				    	"clientIndex": client.index
				    }
				}, p.client.id);
				
				// Let the client know construction has started
				p.client.sendMessage({
				    "method": "constructionStarted",
				    "result": {
				        "building": building,
				        "clientIndex": client.index,
						"resources": p.resources,
						"queue": p.queue.construction.length
				    }
				});
			}
			else
			{
				// Too far from nearest building, can't build there
				client.sendMessage({"method": "constructionFailed", "result": {"error": 2}});
			}
		}
		else
		{
			// Tile is blocked, can't build there
			client.sendMessage({"method": "constructionFailed", "result": {"error": 1}});
		}
    }
    else
    {
        // Not enough resource
        p.client.sendMessage({"method": "constructionFailed", "result": {"error": 0}});
    }
}

GameSession.prototype.createUnit = function(client, params)
{
	if (this.active == false) { return; }
	
	var p = this.players[client.index];
	
	if (p.resources >= GameSession.baseUnits[params.type].cost)
	{
		p.resources -= GameSession.baseUnits[params.type].cost;
		
		// Upgrading barracks/factory decreases training/construction time
		var trainingTime = (p.upgrade.building[GameSession.baseUnits[params.type].source] == true ? GameSession.baseUnits[params.type].baseTime[1] : GameSession.baseUnits[params.type].baseTime[0]);
		
		var unit = {
			"type": params.type,
			"x": params.x,
			"y": params.y,
			"state": 0,
			"moveCounter": GameSession.baseUnits[params.type].moveCounter,
			"condition": GameSession.baseUnits[params.type].health,
			"time": trainingTime,
			"refId": p.indexes.unit++,
			"fortify": {
				"state": false,
				"timer": 0
			}
		};
		
		var queueLength = 0;
		
		// Created from a barrack
		if (GameSession.baseUnits[params.type].source == 2) {
			p.queue.barracks.unshift(unit);
			queueLength = p.queue.barracks.length;
		}
		// Created from a factory
		else if (GameSession.baseUnits[params.type].source == 3){
			p.queue.factory.unshift(unit);
			
			queueLength = p.queue.factory.length;
		}
		
		//Send response
		this.sendMessageToAllClientsExcept(this.players, {
			"method": "trainingStarted",
			"result": {
				"unit": unit,
				"clientIndex": client.index
			}
		}, p.client.id);
		
		p.client.sendMessage({
			"method": "trainingStarted",
			"result": {
				"unit": unit,
				"clientIndex": client.index,
				"resources": p.resources,
				"queue": queueLength
		}});
	}
	else
	{
		//Not enough resource
		p.client.sendMessage({"method": "trainingFailed", "result": {"error": 0}});
	}
}

GameSession.prototype.cancelSelectedUnitOrders = function(client)
{
	if (this.active == false) { return; }
	
	var p = this.players[client.index];
	var selectedUnits = $.grep(p.units, function(e) { return e.selected == true });
	
	$.each(selectedUnits, function(i, u)
	{
		u.state = 0;
		u.target = null;
        u.path = [];	
	});
}

GameSession.prototype.unselect = function(client)
{
	if (this.active == false) { return; }
	
	var p = this.players[client.index];
	var selectedUnits = $.grep(p.units, function(e) { return e.selected == true });
	
	$.each(selectedUnits, function(i, u) {
		u.selected = false;
	});
}

GameSession.prototype.select = function(client, params)
{
    if (this.active == false) { return; }
	
	var p = this.players[client.index];
    var selected = [];

    $.each(p.units, function(i, u)
    {
    	u.selected = false;	
		
		if (params.refId == null)
		{
			// Select up to 10 units on that tile
			if (u.x == params.x && u.y == params.y)
			{
				if (selected.length < 10)
				{
					u.selected = true;
					selected.push(u);
				}
			}
		}
		else
		{
			// Select n-th unit on that tile
			if (u.x == params.x && u.y == params.y)
			{
				if (u.refId == params.refId)
				{
					u.selected = true;
					selected.push(u);
				}
			}
		}
	});
    
    p.client.sendMessage({"method": "select", "result": selected});
}

GameSession.prototype.sendChatMessage = function(client, params)
{
	console.log(client.name + ": " + params.text.toUpperCase());
	
	this.sendMessageToAllClientsExcept(this.players, {
		"method": "say",
		"result": {
			"text": client.name + ": " + params.text.toUpperCase(),
			"color": 14
		}
	}, client.id);		
}

GameSession.prototype.upgrade = function(client, params)
{
	if (this.active == false) { return; }
	
	var p = this.players[client.index];
	
	var upgradeTime = 0;
	var upgradeCost = 0;
	
	if (params.upgradeType == 'building')
	{
		upgradeTime = GameSession.baseBuildings[params.type].upgrade.time;
		upgradeCost = GameSession.baseBuildings[params.type].upgrade.cost;
	}
	else if (params.upgradeType == 'unit')
	{
		upgradeTime = GameSession.baseUnits[params.type].upgrade.time;
		upgradeCost = GameSession.baseUnits[params.type].upgrade.cost;

	}
	
	
	if (p.resources < upgradeCost)
	{
		p.client.sendMessage({"method": "upgradeFailed", "result": {"error": 0}});
		return;
	}
	
	if (p.upgrade[params.upgradeType][params.type] == true) {
		return;	
	}
	
	if (upgradeTime == 0) {
		return;	
	}
	
	// console.log('upgrade ' + params.upgradeType);
	// console.log(params);
	
	p.resources -= upgradeCost;
	
	p.queue.upgrade.unshift({
		'params': params,
		'time': upgradeTime
	});
	
	var now = (Date.now() / 1000);
	
	p.client.sendMessage({'method': 'upgradeStarted', 'result': {'params': params, 'resources': p.resources, 'start': now, 'end': (now + upgradeTime)}});
}

GameSession.prototype.sellBuilding = function(client, params)
{
	var p = this.players[client.index];
	
    var targetBuilding = null;
    var targetBuildingIndex = 0;
    
   	// Get building on target tile
	$.each(p.buildings, function(i, b) {
		if (b.x == params.x && b.y == params.y && b.time == 0) {
			targetBuilding = b;
			targetBuildingIndex = i;
			return false;	
		}
	});
	
	// No building on that tile
	if (!targetBuilding) {
		return;
	}
	
	// Can't sell COMMAND CENTER
	if (targetBuilding.type == 0) {
		return;
	}
	
	p.resources += (GameSession.baseBuildings[targetBuilding.type].cost * 0.75);
	
	this.map.setTile(targetBuilding.x, targetBuilding.y, 0);
	
	p.buildings.splice(targetBuildingIndex, 1);	

	this.sendMessageToAllClients(this.players, {
		"method": "buildingSold",
		"result": {
			"success": true,
			"client": p.index,
			"index": targetBuildingIndex
		}
	});
		
	this.checkPlayerUnitsLeft(p);
	
	return;
}

// Pick out the engineers from selected units and send them to target building
GameSession.prototype.repair = function(client, params)
{
	if (client == null) { return; }
	if (this.active == false) { return; }
	
	var p = this.players[client.index];
	var startX = -1, startY = -1;
	var engineersInSelectedUnits = $.grep(p.units, function(u) { return (u.selected == true && u.type == 6) });
	var otherSelectedUnits = $.grep(p.units, function(u) { return (u.selected == true && u.type != 6) });
	
	$.each(otherSelectedUnits, function(i, u) {
		u.selected = false;
	});
	 
	// No engineers in the pack
	if (engineersInSelectedUnits.length == 0) {
    	return;
	}
    
    var targetBuilding = null;

   	// Get building on target tile
	$.each(p.buildings, function(i, b) {
		if (b.x == params.x && b.y == params.y) {
			targetBuilding = b;
			return false;	
		}
	});
	
	// What are you trying to repair - air?
	if (!targetBuilding) {
		return;	
	}
	
	if (targetBuilding.condition >= GameSession.baseBuildings[targetBuilding.type].condition) {
		return;	
	}
    
    	
    startX = engineersInSelectedUnits[0].x;
    startY = engineersInSelectedUnits[0].y;
		
	var restoreTileTo = -1;
	
	// Temp. unblock target tile if under building
	if (this.map.getTile(params.x, params.y) == 3)
	{
		this.map.setTile(params.x, params.y, 0);
		restoreTileTo = 3;
	}
	
	var path = Pathfind.findPath(startX, startY, params.x, params.y, this.map);
	
	if (restoreTileTo != -1) {
		this.map.setTile(params.x, params.y, restoreTileTo);
	}
	
	path.shift();
	path.pop();
		
	$.each(engineersInSelectedUnits, function(i, u)
	{	
		u.state = 2; // repair
		u.target = {
			'x': params.x,
			'y': params.y,
			'type': 'building',
			'targets': [{
				'player': p.index,
				'ref': targetBuilding.refId
				}]};
		u.path = path.slice(0); // copy
	});
	
	path = [];
	
	// p.client.sendMessage({"method": "attack", "result": {"success": true}});
}

GameSession.prototype.getAnyBuildingRefAtCoord = function(x, y)
{
	var result = null;
	
	$.each(this.players, function(pi, p) {
		$.each(p.buildings, function(bi, b) {
			if (b.x == x && b.y == y) {
				result = {'player': pi, 'ref': b.refId};
				return false;
			}
		});
		
		// Found a building, no need to loop any more players
		if (result) {
			return false;
		}
	});
	
	return result;
}

GameSession.prototype.getAnyUnitsRefAtCoord = function(x, y)
{
	var result = [];
	
	$.each(this.players, function(pi, p) {
		if (!p) { return true; }
		$.each(p.units, function(ui, u) {
			if (u.x == x && u.y == y) {
				result.push({'player': pi, 'ref': u.refId});
			}
		});
	});
	
	return result;
}

GameSession.prototype.getBuildingByRef = function(ref)
{
	if (!this.players[ref.player]) {
		return null;
	}
	
	var buildings = this.players[ref.player].buildings;
	
	for (var i=0, len=buildings.length; i<len; ++i)
	{
        if (buildings[i].refId === ref.ref) {
            return {'building': buildings[i], 'index': i};
		}
    }
	
	return null;
}

GameSession.prototype.getUnitByRef = function(ref)
{
	if (!this.players[ref.player]) {
		return null;
	}

	var units = this.players[ref.player].units;
	
	for (var i=0, len=units.length; i<len; ++i)
	{
        if (units[i].refId === ref.ref) {
            return {'unit': units[i], 'index': i};
		}
    }
	
	return null;
}

GameSession.prototype.fortify = function(client, params)
{
	if (client == null || this.active == false) { return; }
	
	var p = this.players[client.index];
	var selectedUnfortifiedUnits = $.grep(p.units, function(u) { return (u.selected == true && u.fortify.state == false) });
	
	$.each(selectedUnfortifiedUnits, function(i, u)
	{
		var fortifyTime = GameSession.baseUnits[u.type].fortifyTime;
		
		if (fortifyTime == 0) {
			return true;
		}
		
		u.fortify.state = false;
		u.fortify.timer = fortifyTime;
	});
}

GameSession.prototype.unfortify = function(client, params)
{
	if (client == null || this.active == false) { return; }
	
	var p = this.players[client.index];
	var selectedFortifiedUnits = $.grep(p.units, function(u) { return (u.selected == true && u.fortify.state == true) });
	
	$.each(selectedFortifiedUnits, function(i, u)
	{
		var fortifyTime = GameSession.baseUnits[u.type].fortifyTime;
		u.fortify.timer = -fortifyTime;
	});
}

GameSession.prototype.attack = function(client, params)
{
	if (client == null || this.active == false) { return; }

	var p = this.players[client.index];
	var startX = -1, startY = -1;
	var selectedUnits = $.grep(p.units, function(u) { return (u.selected == true) });
	
    if (selectedUnits.length == 0)
    	return;
    	
    startX = selectedUnits[0].x;
    startY = selectedUnits[0].y;
	
	// Temp. unblock target tile if under building or if forest
	var tileVal = this.map.getTile(params.x, params.y);
	
	// Water
	if (tileVal == 2) {
		return;
	}
	

	
	var ses = this;
	
	var targets = [];
		
	// Attacking forest to clear the tile
	if (tileVal == 1)
	{
		targetType = 'forest';
		targets.push({'x': params.x, 'y': params.y});
	}
	// Attacking a building tile
	else if (tileVal == 3)
	{
		var bRef = this.getAnyBuildingRefAtCoord(params.x, params.y);
			
		if (!bRef) {
			return;
		}			
			
		targetType = 'building';
		targets.push(bRef);
	}
	// Attacking unit(s)
	else
	{
		targetType = 'unit';
		targets = this.getAnyUnitsRefAtCoord(params.x, params.y);
	}
	
	
	
	var restoreTileTo = -1;
	
	if (tileVal == 3 || tileVal == 1)
	{
		this.map.setTile(params.x, params.y, 0);
		restoreTileTo = tileVal;
	}
	
	var path = Pathfind.findPath(startX, startY, params.x, params.y, this.map);
	
	if (restoreTileTo != -1) {
		this.map.setTile(params.x, params.y, restoreTileTo);
	}
	
	path.shift();
	path.pop();
	
	$.each(selectedUnits, function(i, u)
	{
		if (targets.length == 0)
		{
			u.state = 0;
			u.target = null;
			u.path = [];
		}
		else
		{
			u.state = 1; // Attack
			u.target = {
				'type': targetType,
				'targets': targets,
				'x': params.x,
				'y': params.y
			};
			
			if (u.fortify.state == false) {
				u.path = path.slice(0);
			}
		}
	});
	
	
	
	/*$.each(selectedUnits, function(i, u)
	{*/

		/*else
		{
			// Who are we attacking?
			for (var opponent=0; opponent < ses.maxPlayers; opponent++)
			{
				if (opponent == client.index || !ses.players[opponent]) { continue; }
			
				for (k in ses.players[opponent].buildings)
				{
					if (ses.players[opponent].buildings[k].x == params.x && ses.players[opponent].buildings[k].y == params.y)
					{
						targetType = 'building';
						clientBeingAttacked = opponent;
						targetIndex = k;
						
						break;
					}
				}	
				
				for (k in ses.players[opponent].units)
				{
					if (ses.players[opponent].units[k].x == params.x && ses.players[opponent].units[k].y == params.y)
					{
						targetType = 'unit';
						clientBeingAttacked = opponent;
						targetIndex = k;
						
						break;
					}
				}	
				
				if (clientBeingAttacked != -1) {
					break;
				}
			}
			
			if (clientBeingAttacked == -1)
			{
				u.state = 0;
				u.target = null;
				u.path = [];
				
				return;
			}
		}*/
		
		/*u.state = 1; // attack
		// u.target = {'x': params.x, 'y': params.y, 'type': targetType, 'index': targetIndex, 'targetClientIndex': clientBeingAttacked};
		u.path = path.slice(0); // copy
	});*/

	path = [];
    
    p.client.sendMessage({"method": "attack", "result": {"success": true}});
}

GameSession.prototype.move = function(client, params)
{
    if (this.active == false) { return; }
	
	var p = this.players[client.index];
    var startX, startY;
	var selectedUnits = $.grep(p.units, function(u) { return (u.selected == true) });
	var selectedFortifiedUnits = $.grep(selectedUnits, function(u) { return (u.fortify.state == true) });
	
	// Start to unfortify these units (if not already doing that)
	$.each(selectedFortifiedUnits, function(i, u) {
		if (u.fortify.timer == 0) {
			u.fortify.timer = -4;
		}
	});
	
    if (selectedUnits.length == 0)
    	return;
    	
    startX = selectedUnits[0].x;
    startY = selectedUnits[0].y;
		
	if (params.relative == true)
	{
		params.x = startX + params.x;
		params.y = startY + params.y;
		
		if (params.x < 0 || params.y < 0 || params.x >= this.map.width || params.y >= this.map.height) {
			return;	
		}
		
	}
    
    //Pathfind
    var path = Pathfind.findPath(startX, startY, params.x, params.y, this.map);
	
	// The first tile is the starting tile, don't need that
	path.pop();
	
    // console.log(path);
    
    if (path.length == 0) {
        return;
	}

    //Save path for unit
    $.each(selectedUnits, function(i, u)
    {
        // Restart fortifying
		if (u.fortify.state == false && u.fortify.timer > 0) { 
			u.fortify.timer = GameSession.baseUnits[u.type].fortifyTime;
		}

		u.state = 0;
		u.target = null;
		u.path = path.slice(0); // copy
    });
	
	path = [];
    
    this.sendMessageToAllClients(this.players, {"method": "move", "result": {"success": true}});
}

GameSession.prototype.clean = function()
{
	$.each(this.players, function(i, p) {
		if (p && p.client) {
			p.client.gameSession = null;
		}
	});
	
	this.players = [];
	this.map = null;
	this.name = null;
	this.id = null;
	this.maxPlayers = 0;
}

GameSession.prototype.calculatePowerLevel = function(p)
{
	var powerLevel = 0;
	
	$.each(p.buildings, function(i, b) {
		if (b.type == 1) {
			powerLevel += Math.round(PowerPlantProduction * (b.condition / GameSession.baseBuildings[1].health));	
		}
	});
	
	return powerLevel;
}


GameSession.prototype.checkGameOver = function()
{
	if (this.active == false) {
		return;
	}
	
	var winners = [];
	var losers = [];
	
	$.each(this.players, function(i, p) {
		if (!p) return true;
		
		if (p.defeated == true && p.client) {
			losers.push(p.client);
		} else if (p.defeated == false && p.client) {
			winners.push(p.client);
		}
	});
	
	if (this.countActivePlayers() == losers.length && winners.length == 0)
	{
		console.log("GAME OVER!");
		this.active = false;
		ServerState.endGame(null, losers, this.id);
	}
	
	if (this.countActivePlayers() - 1 == losers.length && winners.length == 1)
	{
		console.log("GAME OVER!");
		this.active = false;
		ServerState.endGame(winners[0], losers, this.id);
	}
	
	return;
}


/*
	Check if player has any units / buildings left.
	If not, declare defeat.
*/

GameSession.prototype.checkPlayerUnitsLeft = function(p)
{
	if (p.defeated == false)
	{
		if (p.buildings.length == 0 && p.units.length == 0)
		{
			if (p.client)
			{
				console.log("PLAYER " + p.client.name + " (" + p.client.index + ") IS DEFEATED!");
			
				//Send to clients
				this.sendMessageToAllClients(this.players, {
					"method": "playerDefeated",
					"result": {
						"clientIndex": p.client.index
					}
				});
			}
			else
			{
				console.log("PLAYER (" + p.index + ") IS DEFEATED!");
			}
		
			p.defeated = true;
			
			// No client tied to this slot
			// Reset
			if (!p.client) {
				this.players[p.index] = null;
			}
		}
	}
	
	var ses = this;
	
	process.nextTick(function() {
		ses.checkGameOver();
	});
}


GameSession.prototype.stepConstructionQueue = function (p)
{
	for (var k = p.queue.construction.length-1; k >= 0; --k)
	{
		if (p.queue.construction[k].time > 0)
		{
			p.queue.construction[k].time = Math.max(p.queue.construction[k].time - 1000, 0);  //1000 due slowTick
			
			// Only one construction at a time
			break;
		}
		else
		{
			//Send to clients
			this.sendMessageToAllClients(this.players, {
				"method": "constructionCompleted",
				"result": {
					"success": true,
					"clientIndex": p.index,
					"x": p.queue.construction[k].x,
					"y": p.queue.construction[k].y
				}
			});
			
			// Increase power consumption
			p.power.required += GameSession.baseBuildings[p.queue.construction[k].type].power;
			
			// Power production increased
			if (p.queue.construction[k].type == 1) {
				p.power.max += PowerPlantProduction;
			}
						
			p.buildings.push(p.queue.construction[k]);
			p.queue.construction.splice(k,1);
			
			
			p.power.level = this.calculatePowerLevel(p);
			
			if (p.client != null) {
				p.client.sendMessage({'method': 'powerChange', 'result': p.power});
			}
		}
	}
}

GameSession.prototype.stepBarracksQueue = function (p)
{
	var powerplantsDamaged = ((p.power.level / p.power.max) <= 0.6 ? true : false);
	
	for (var k = p.queue.barracks.length-1; k >= 0; --k)
	{
		if (p.queue.barracks[k].time > 0)
		{
			p.queue.barracks[k].time = Math.max(p.queue.barracks[k].time - (powerplantsDamaged ? 500 : 1000), 0);
			
			// Only one unit trained at a time
			break;
		}
		else
		{
			// Add to actual units list
			p.units.push(p.queue.barracks[k]);
			
			//Send to clients
			this.sendMessageToAllClients(this.players, {
				"method": "trainingCompleted",
				"result": {
					"success": true,
					"clientIndex": p.index,
					"unit": p.queue.barracks[k]
				}
			});

			// Remove unit from queue
			p.queue.barracks.splice(k, 1);
		}
	}	
}

GameSession.prototype.stepFactoryQueue = function (p)
{
	var powerplantsDamaged = ((p.power.level / p.power.max) <= 0.6 ? true : false);
	
	for (var k = p.queue.factory.length-1; k >= 0; --k)
	{
		if (p.queue.factory[k].time > 0)
		{
			p.queue.factory[k].time = Math.max(p.queue.factory[k].time - (powerplantsDamaged ? 500 : 1000), 0);
			
			// Only one unit trained at a time
			break;
		}
		else
		{
			// Add to actual units list
			p.units.push(p.queue.factory[k]);
			
			//Send to clients
			this.sendMessageToAllClients(this.players, {
				"method": "trainingCompleted",
				"result": {
					"success": true,
					"clientIndex": p.client.index,
					"unit": p.queue.factory[k]
				}
			});

			// Remove unit from queue
			p.queue.factory.splice(k, 1);
		}
	}	
}

GameSession.prototype.stepUpgradeQueue = function (p)
{	
	var powerplantsDamaged = ((p.power.level / p.power.max) <= 0.6 ? true : false);
	
	// LAB stops when powerplants are damaged
	if (powerplantsDamaged) {
		return;
	}
	
	for (var k = p.queue.upgrade.length-1; k >= 0; --k)
	{
		if (p.queue.upgrade[k].time > 0)
		{
			p.queue.upgrade[k].time = Math.max(p.queue.upgrade[k].time - 1000, 0);
			break;
		}
		else
		{
			p.upgrade[p.queue.upgrade[k].params.upgradeType][p.queue.upgrade[k].params.type] = true;
		
			if (p.client) {
				p.client.sendMessage({
					"method": "upgradeCompleted",
					"result": {
						"success": true,
						"clientIndex": p.client.i,
						"params": p.queue.upgrade[k].params
					}
				});
			}
			
			//Remove from queue
			p.queue.upgrade.splice(k, 1);
		}
	}	
} 

GameSession.prototype.moveUnits = function (p)
{
	for (k in p.units)
	{
		var u = p.units[k];
		var path = u.path;
	
		if (u.fortify.state == true) {
			continue;
		}
	
		if (path && path.length > 0)
		{
			u.moveCounter -= 1;
			
			if (u.moveCounter == 0)
			{
				// Restart fortifying
				if (u.fortify.state == false && u.fortify.timer > 0) {
					u.fortify.timer = GameSession.baseUnits[u.type].fortifyTime;
				}
						
				u.x = path[path.length-1][0];
				u.y = path[path.length-1][1];
		
				this.sendMessageToAllClients(this.players, {
					"method": "unitMoved",
					"result": {
						"clientIndex": p.index,
						"unitIndex": parseInt(k, 10),
						"x": u.x,
						"y": u.y
					}
				});
		
				u.path.pop();
				
				u.moveCounter = GameSession.baseUnits[u.type].moveCounter;
			}
		}
	}
}

GameSession.prototype.updateHospitalsGarages = function( p )
{
	var hospitals = $.grep(p.buildings, function(b) { return b.type == 7 });
	var garages = $.grep(p.buildings, function(b) { return b.type == 8 });
	var gs = this;
	var players = this.players;

	$.each(hospitals, function(hIdx, hospital)
	{
		// Get first unit on hospital tile that needs patching up.
		$.each(p.units, function(uIdx, unit)
		{
			// Infantry only
			if (!unit.isInfantry) {
				return true;
			}
			
			var dx = Math.abs(hospital.x - unit.x);
			var dy = Math.abs(hospital.y - unit.y);
			
			// Too far
			if (dx > 1 || dy > 1) {
				return true;
			}
		
			// Unit needs treatment
			if (unit.condition < GameSession.baseUnits[unit.type].health)
			{
				unit.condition = Math.min(unit.condition + 2, GameSession.baseUnits[unit.type].health);
				
				gs.sendMessageToAllClients(players, {
					'method': 'unitConditionChanged',
					'result': {
						'client': p.index,
						'index': uIdx,
						'condition': unit.condition
					}
				});
				
				return false;
			}
		});
	});

	$.each(garages, function(gIdx, garage)
	{
		// Get first unit on hospital tile that needs patching up.
		$.each(p.units, function(uIdx, unit)
		{
			// Vehicles only
			if (unit.isInfantry) {
				return true;
			}
			
			var dx = Math.abs(garage.x - unit.x);
			var dy = Math.abs(garage.y - unit.y);
			
			// Too far
			if (dx > 1 || dy > 1) {
				return true;
			}
		
			// Unit needs repairs
			if (unit.condition < GameSession.baseUnits[unit.type].health)
			{
				unit.condition = Math.min(unit.condition + 8, GameSession.baseUnits[unit.type].health);
				
				gs.sendMessageToAllClients(players, {
					'method': 'unitConditionChanged',
					'result': {
						'client': p.index,
						'index': uIdx,
						'condition': unit.condition
					}
				});
				
				return false;
			}
		});
	});

	return;	
}

GameSession.prototype.updateTimedUnitEvents = function(p)
{	
	var fortifiedUnits = [];
	var unfortifiedUnits = [];
	
	$.each(p.units, function(unitIndex, unit)
	{
		if (unit.fortify.timer > 0)
		{
			unit.fortify.timer -= 1;
		
			if (unit.fortify.timer <= 0)
			{
				unit.fortify.timer = 0;
				unit.fortify.state = true;
				
				fortifiedUnits.push(unitIndex);
			}
		}
		else if (unit.fortify.timer < 0)
		{
			unit.fortify.timer += 1;
		
			if (unit.fortify.timer >= 0)
			{
				unit.fortify.timer = 0;
				unit.fortify.state = false;
				
				unfortifiedUnits.push(unitIndex);
			}
		}
	});
	
	if (fortifiedUnits.length > 0)
	{
		this.sendMessageToAllClients(this.players, {
			'method': 'unitsFortified',
			'result': {
				'client': p.index,
				'units': fortifiedUnits
			}
		});	
	}
	
	if (unfortifiedUnits.length > 0)
	{
		this.sendMessageToAllClients(this.players, {
			'method': 'unitsUnfortified',
			'result': {
				'client': p.index,
				'units': unfortifiedUnits
			}
		});	
	}
	
	return;
}

GameSession.prototype.performUnitsClassAction = function(p)
{
	var medics = $.grep(p.units, function(u) { return (u.type == 5) });
	var engineers = $.grep(p.units, function(u) { return (u.type == 6) });
	var gs = this;	
		
	$.each(medics, function(medicIndex, medic)
	{
		// Find first unit on the same tile that has low enough condition
		for (var i = 0; i < p.units.length; ++i)
		{
			var unit = p.units[i];
			
			if (!GameSession.baseUnits[unit.type].isInfantry || unit.type == 5 || unit.x != medic.x || unit.y != medic.y || unit.condition >= (GameSession.baseUnits[unit.type].health * 0.5))
				continue;
			
			unit.condition = Math.min(unit.condition + 1, GameSession.baseUnits[unit.type].health);
			
			gs.sendMessageToAllClients(gs.players, {
				'method': 'unitConditionChanged',
				'result': {
					'client': p.index,
					'index': i,
					'condition': unit.condition
				}
			});
			
			break;
		}
	});
	
	$.each(engineers, function(engineerIndex, engineer)
	{
		for (var i = 0; i < p.units.length; ++i)
		{
			var unit = p.units[i];
			
			if (GameSession.baseUnits[unit.type].isInfantry || unit.x != engineer.x || unit.y != engineer.y || unit.condition >= (GameSession.baseUnits[unit.type].health * 0.5))
				continue;
			
			unit.condition = Math.min(unit.condition + 3, GameSession.baseUnits[unit.type].health);
			
			gs.sendMessageToAllClients(gs.players, {
				'method': 'unitConditionChanged',
				'result': {
					'client': p.index,
					'index': i,
					'condition': unit.condition
				}
			});
			
			break;
		}
	});
	
	return;
}

GameSession.prototype.updateTurrets = function( p )
{
	var noPower = (p.power.required > p.power.level || p.power.level == 0) ? true : false;

	// Turrets don't work
	if (noPower) {
		return;
	}
			
	var turrets = $.grep(p.buildings, function(b) { return (b.type == 6 && b.time == 0) });
	var players = this.players;
	var gs = this;
	
	// Update each turret
	$.each(turrets, function(i1, turretObj)
	{
		// Check all opponents .. 
		$.each(players, function(i2, playerObj)
		{
			var turretFired = false;

			if (!playerObj || i2 == p.index) {
				return true;
			}
			
			// .. see if any of their units are in range.
			$.each(playerObj.units, function(i3, unit)
			{
				var dx = Math.abs(turretObj.x - unit.x);
				var dy = Math.abs(turretObj.y - unit.y);
			
				// Too far - continue loop
				if (dx > 1 || dy > 1) {
					return true;
				}
				
				var dam = (p.upgrade.building[6] == true ? 10 : 7);
				
				if (unit.fortify.state == true) {dam *= 0.75; }
				
				unit.condition = Math.max(unit.condition - dam, 0);
				
				// Unit killed
				if (unit.condition == 0)
				{
					gs.sendMessageToAllClients(players, {
					'method': 'unitDestroyed',
					'result': {
						'attackerClient': p.index,
						'targetClient': playerObj.index,
						'src': 'turret',
						'index': i3}});
					
					playerObj.units.splice(unit.index, 1);
					
					gs.checkPlayerUnitsLeft(playerObj);
				}
				else
				{
					gs.sendMessageToAllClients(players, {
						'method': 'unitHit',
						'result': {
							'attackerClient': p.index,
							'targetClient': playerObj.index,
							'index': i3,
							'condition': unit.condition,
							'damage': dam}});
				}
				
				turretFired = true;
				
				return false;
			});
			
			if (turretFired) {
				return false;
			}
		});
	});	
}

GameSession.prototype.attackUnits = function (p)
{
	for (k in p.units)
	{
		var u = p.units[k];
		var path = u.path;
	
		if (path && path.length == 0)
		{
			/*
				Attacking
			*/
			if (u.state == 1)
			{
				var dam = GameSession.baseUnits[u.type].offence;
				
				if (dam == 0) {
					continue;
				}
				
				if (u.target.targets.length == 0)
				{
					u.state = 0;
					u.target = null;
					continue;
				}

				if (u.target.type == 'forest')
				{
					if (Math.floor(Math.random()*6) <= dam)
					{
						var tileCoords = u.target.targets[0];
						
						if (this.map.getTile(tileCoords.x, tileCoords.y) == 1)
						{
							this.map.setTile(tileCoords.x, tileCoords.y, 0);
	
							this.sendMessageToAllClients(this.players, {
								'method': 'tileChanged',
								'result': {
									'attackerClient': p.index,
									'x': tileCoords.x,
									'y': tileCoords.y,
									'value': 0
								}
							});
							
							u.state = 0;
							u.target = null;
						}
						
						continue;
					}
				} 
				else if (u.target.type == 'building')
				{
					var targetObjRef = u.target.targets[u.target.targets.length-1];
					var result = this.getBuildingByRef(targetObjRef)
		
					if (!result /*|| b.x != u.target.x || b.y != u.target.y*/)
					{
						u.state = 0;
						u.target = null;
						
						continue;
					}
		
					var b = result.building;
					var targetPlayer = this.players[targetObjRef.player];

					b.condition = Math.max(b.condition - dam, 0);
					
					if (b.condition <= 0)
					{
						this.sendMessageToAllClients(this.players, {
							'method': 'buildingDestroyed',
							'result': {
								'attackerClient': p.index,
								'targetClient': targetObjRef.player,
								'index': result.index
							}
						});
					
						this.map.setTile(b.x, b.y, 0);
						targetPlayer.buildings.splice(result.index, 1);
					
						// Cancel trainees
						if (b.type == 2) {
							// this.trainingQueue[this.units[i][x].target.targetClientIndex] = [];
						}
						else if (b.type == 1)
						{						
							targetPlayer.power.level = this.calculatePowerLevel(targetPlayer);
							
							if (targetPlayer.client) {
								targetPlayer.client.sendMessage({'method': 'powerChange', 'result': targetPlayer.power});
							}
						}

						u.state = 0;
						u.target = null;
						
						this.checkPlayerUnitsLeft(targetPlayer);
					}
					else
					{	
						if (b.type == 1)
						{						
							targetPlayer.power.level = this.calculatePowerLevel(targetPlayer);
		
							targetPlayer.client.sendMessage({
								'method': 'buildingHit',
								'result': {
									'attackerClient': p.index,
									'targetClient': targetObjRef.player,
									'index': result.index,
									'condition': b.condition,
									'damage': dam,
									'power': targetPlayer.power
								}
							});
							
							this.sendMessageToAllClientsExcept( this.clients, {
								'method': 'buildingHit',
								'result': {
									'attackerClient': p.index,
									'targetClient': targetObjRef.player,
									'index': result.index,
									'condition': b.condition,
									'damage': dam
								}
							}, targetPlayer.client.id);
						}
						else
						{
							this.sendMessageToAllClients(this.clients, {
								'method': 'buildingHit',
								'result': {
									'attackerClient': p.index,
									'targetClient': targetObjRef.player,
									'index': result.index,
									'condition': b.condition,
									'damage': dam
								}
							});
						}
					}
				}
				else if (u.target.type == 'unit')
				{
					// No more targets?
					if (u.target.targets.length == 0)
					{
						u.state = 0;
						u.target = null;
						continue;
					}
					else
					{
						// All targets will attack back
						for (var i = 0; i < u.target.targets.length; ++i)
						{
							var ref = u.target.targets[i];
							var result = this.getUnitByRef(ref);
							
							if (!result) {
								continue;
							}
							
							var targ = result.unit;

							if (targ.state == 0)
							{
								/*
									If unit is fortified the targets won't respond to attacks unless they are near (dist <= 1)
									as thats the distance fortified units can attack.
								*/
								if (u.fortify.state == true)
								{
									var dx = Math.abs(targ.x - u.x);
									var dy = Math.abs(targ.y - u.y);
									
									if (dx > 1 || dy > 1) {
										continue;
									}
								}
									
								this.attack(this.players[ref.player].client, {'x':u.x, 'y':u.y});
							}
						}						
					}
					
					var rndIdx = Math.floor(Math.random() * u.target.targets.length);
					var targetObjRef = u.target.targets[rndIdx];   //[u.target.targets.length-1]; // 
					var result = this.getUnitByRef(targetObjRef)
					
					// Target doesn't exist
					if (!result)
					{
						u.target.targets.splice(rndIdx, 1);
						
						continue;
					}
					
					var targetedUnit = result.unit;
					var targetedPlayer = this.players[targetObjRef.player];
					
					// Fortified units only attack when distance <= 1
					if (u.fortify.state == true)
					{
						var dx = Math.abs(targetedUnit.x - u.x);
						var dy = Math.abs(targetedUnit.y - u.y);
						
						if (dx > 1 || dy > 1) {
							continue;
						}
					}
	
					// Target has moved
					if (targetedUnit && (targetedUnit.x != u.target.x || targetedUnit.y != u.target.y))
					{
						u.target.x = targetedUnit.x;
						u.target.y = targetedUnit.y;
						
						var path = Pathfind.findPath(u.x, u.y, targetedUnit.x, targetedUnit.y, this.map, true);
						
						// Don't bother .. too far
						if (path.length > 6)
						{
							u.state = 0;
							u.target = null;
							continue;
						}
						
						path.shift();
						path.pop();
						
						u.path = path;
						
						path = null;
						
						continue;
					}
					
					if (targetedUnit.fortify.state == true) {dam *= 0.75; }

					targetedUnit.condition = Math.max(targetedUnit.condition - dam, 0);
	
					if (targetedUnit.condition == 0)
					{
						this.sendMessageToAllClients(this.players, {
						'method': 'unitDestroyed',
						'result': {
							'attackerClient': p.index,
							'targetClient': targetObjRef.player,
							'src': 'combat',
							'index': result.index
							}
						});
						
						targetedPlayer.units.splice(result.index, 1);
						u.target.targets.splice(rndIdx, 1);
						
						this.checkPlayerUnitsLeft(targetedPlayer);
					}
					else
					{
						this.sendMessageToAllClients(this.players, {
							'method': 'unitHit',
							'result': {
								'attackerClient': p.index,
								'targetClient': targetObjRef.player,
								'index': result.index,
								'condition': targetedUnit.condition,
								'damage': dam}});
					}
				}
			}
			/*
				Repairing
			*/
			else if (u.state == 2)
			{
				if (u.target.type == 'building')
				{
					var targetObjRef = u.target.targets[u.target.targets.length-1];
					var result = this.getBuildingByRef(targetObjRef)
					
					if (!result) {
						u.state = 0;
						u.target = null;
						continue;
					}
					
					var b = result.building;
					
					b.condition = Math.min(b.condition + 5, GameSession.baseBuildings[b.type].health);
					
					// Power plant being repaired
					if (b.type == 1) {
						p.power.level = this.calculatePowerLevel(p);
					}
						
					if (b.type == 1 && p.client)
					{	
						p.client.sendMessage({
							'method': 'buildingRepaired',
							'result': {
								'client': p.index,
								'index': result.index,
								'condition': b.condition,
								'power': p.power
							}
						});
					
						this.sendMessageToAllClientsExcept(this.players, {
							'method': 'buildingRepaired',
							'result': {
								'client': p.index,
								'index': result.index,
								'condition': b.condition
							}
						}, p.client.id);
					}
					else
					{		
						this.sendMessageToAllClients(this.players, {
							'method': 'buildingRepaired',
							'result': {
								'client': p.index,
								'index': result.index,
								'condition': b.condition
							}
						});
					}
					
					// Work is done
					if (b.condition == GameSession.baseBuildings[b.type].health)
					{
						u.state = 0;
						u.target = null;
					}
				}
			}
		}
	}	
}

GameSession.prototype.tick = function()
{
	if (this.active == false || this.countActivePlayers() == 0) {
		return;
	}
	
	for (var i=0; i < this.maxPlayers; i++)
	{
        var p = this.players[i];
         
		// This slot is not yet active
        if (p == null || p.client == null) { continue; }
		
		this.moveUnits(p);
	}
}

GameSession.prototype.slowTick = function()
{
	var activePlayersCount = this.countActivePlayers();
	
	if (activePlayersCount == 0)
	{
		this.idleCounter ++;
		
		// Delete idle game session in 10 minutes
		if (this.idleCounter >= 600)
		{
			var ses = this;
			process.nextTick(function() {
				this.active = false;
				ServerState.removeGameSession(ses.id);
			});
		}
		
		return;
	}
	
	if (this.active == false || activePlayersCount == 0) {
		return;
	}
	
	for (var i=0; i < this.maxPlayers; i++)
	{
        var p = this.players[i];
        
        if (!p) { continue; }
		if (p.defeated) { continue; }
 
		var noPower = (p.power.required > p.power.level || p.power.level == 0) ? true : false;

 
		p.resourceDropCounter ++;
		
		if (p.client)
		{
			this.stepConstructionQueue (p);
			this.stepBarracksQueue (p);
			this.stepFactoryQueue (p);
			this.stepUpgradeQueue (p);
			this.attackUnits (p);
			this.updateTurrets (p);
			this.updateHospitalsGarages (p);
			this.performUnitsClassAction (p);
			this.updateTimedUnitEvents (p);
		}
		
		if (p.resourceDropCounter >= (p.upgrade.building[0] == true ? 8 : 10))
		{
			var supplyDropAmount = 50;
			
			$.each(p.buildings, function(i, b) {
				if (b.type == 5 && noPower == false) {
					supplyDropAmount += (p.upgrade.building[5] == true ? 30 : 20);
				}
			});
			
			p.resources += supplyDropAmount;
			
			if (p.client) {
				p.client.sendMessage({'method': 'resourceDrop', 'result': {'resources': p.resources}});
			}
			
			p.resourceDropCounter = 0;
		}
    }

	return;
}

GameSession.prototype.sendMessageToAllClientsExcept = function(_players, message, client_id) {
    if (_players == null) {
		_players = this.players
	}
	for (c in _players) {
        if (_players[c] != null && _players[c].client != null)
			if (_players[c].client.id != client_id)
				_players[c].client.sendMessage(message);
    }
}

GameSession.prototype.sendMessageToAllClients = function(_players, message) {
    if (_players == null) {
		_players = this.players;
	}
	for (c in _players) {
        if (_players[c] != null && _players[c].client != null)
            _players[c].client.sendMessage(message);
    }
}

var distanceToPoint = function(x1,y1,x2,y2) {
    return Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2));
}

var distanceToNearestObject = function(x, y, objects)
{
    var nearest = 999999;
    
    if (!(objects instanceof Array)) objects = [objects];
    
    for (k in objects)
    {
        // Skip turrets
        if (objects[k].type == 6)
        	continue;
        
        var dist = distanceToPoint(objects[k].x, objects[k].y, x, y);
        
        if(dist < nearest)
            nearest = dist;
    }
    
    return nearest;
}

module.exports.baseUnits = [
    // 0 - Trooper
    {
        name: "TROOPER",
        health: 20,
        baseTime: [3000, 2000], 
        cost: 100,
        defence: 1,
        offence: 1,
        source: 2,
		moveCounter: 2,
		isInfantry: true,
		fortifyTime: 4
    },
    // 1 - Heavy trooper
    {
        name: "HEAVY TROOPER",
        health: 40,
        baseTime: [5000, 3500],
        cost: 200,
        defence: 3,
        offence: 2,
        source: 2,
		moveCounter: 2,
		isInfantry: true,
		fortifyTime: 5
    },
	// 2 - Light tank
    {
        name: "LIGHT TANK",
        health: 150,
        baseTime: [8000, 5500],
        cost: 700,
        defence: 3,
        offence: 6,
        source: 3,
		moveCounter: 2,
		isInfantry: false,
		fortifyTime: 6
    },
	// 3 - Heavy tank
    {
        name: "HEAVY TANK",
        health: 250,
        baseTime: [10000, 7000],
        cost: 1200,
        defence: 10,
        offence: 10,
        source: 3,
		moveCounter: 2,
		isInfantry: false,
		fortifyTime: 6
    },
    // 4 - Scout
    {
        name: "SCOUT",
        health: 15,
        baseTime: [4000, 2500],
        cost: 50,
        defence: 0,
        offence: 0,
        source: 2,
		moveCounter: 1, // very fast
		isInfantry: true,
		fortifyTime: 0
    },
    // 5 - Field medic
    {
        name: "FIELD MEDIC",
        health: 30,
        baseTime: [7000, 5000],
        cost: 150,
        defence: 0,
        offence: 0,
        source: 2,
		moveCounter: 2,
		isInfantry: true,
		fortifyTime: 0
    },
    // 6 - Engineer
    {
        name: "ENGINEER",
        health: 30,
        baseTime: [8000, 5500],
        cost: 200,
        defence: 0,
        offence: 0,
        source: 2,
		moveCounter: 2,
		isInfantry: true,
		fortifyTime: 0
    },
	// 7 - MRB (Mobile Radar Beacon)
    {
        name: "MRB",
        health: 100,
        baseTime: [12000, 7000],
        cost: 1700,
        defence: 0,
        offence: 0,
        source: 2,
		moveCounter: 3, // very slow
		isInfantry: false,
		fortifyTime: 8
    }
];

module.exports.baseBuildings = [
    // 0 - COMMAND CENTER
    {
        name: "COMMAND CENTER",
        baseTime: 15000,
        cost: 1500,
        defence: 3,
		health: 600,
		upgrade: {'time': 25000, 'cost': 3000},
		power: 800
    },
    // 1 - POWER PLANT
    {
        name: "POWER PLANT",
        baseTime: 9000,
        cost: 500,
        defence: 3,
		health: 300,
		upgrade: {'time': 10000, 'cost': 1000},
		power: 0
    },
    // 2 - BARRACKS
    {
        name: "BARRACKS",
        baseTime: 12000,
        cost: 700,
        defence: 3,
		health: 250,
		upgrade: {'time': 15000, 'cost': 1800},
		power: 600
    },
    // 3 - FACTORY
    {
        name: "FACTORY",
        baseTime: 16000,
        cost: 1000,
        defence: 3,
		health: 400,
		upgrade: {'time': 19000, 'cost': 2500},
		power: 1000
    },
    // 4 - LABS
    {
        name: "LABS",
        baseTime: 21000,
        cost: 2000,
        defence: 3,
		health: 200,
		upgrade: null,
		power: 2100
    },
    // 5 - SUPPLY DEPOT
    {
        name: "SUPPLY DEPOT",
        baseTime: 12000,
        cost: 700,
        defence: 3,
		health: 300,
		upgrade: {'time': 13000, 'cost': 1500},
		power: 800
    },
    // 6 - TURRET
    {
        name: "TURRET",
        baseTime: 8000,
        cost: 500,
        defence: 3,
		health: 100,
		upgrade: {'time': 10000, 'cost': 900},
		power: 250
    },
	// 7 - HOSPITAL
    {
        name: "FIELD HOSPITAL",
        baseTime: 7000,
        cost: 1000,
        defence: 3,
		health: 150,
		upgrade: {'time': 10000, 'cost': 800},
		power: 700
    },
	// 8 - GARAGE
    {
        name: "GARAGE",
        baseTime: 9000,
        cost: 1400,
        defence: 3,
		health: 200,
		upgrade: {'time': 10000, 'cost': 1200},
		power: 1000
    }
];
